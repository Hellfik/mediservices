security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_RESPONSABLE, ROLE_COMMERCIAL]
        ROLE_RESPONSABLE: [ROLE_MAINTENANCE]
        ROLE_MAINTENANCE: [ROLE_USER]
        ROLE_COMMERCIAL: [ROLE_USER]

    encoders:
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true

            provider: in_database
            form_login: 
                login_path: security_login
                check_path: security_login
                csrf_token_generator: security.csrf.token_manager
                default_target_path: admin
                
            
            logout:
                path: security_logout
                target: security_login
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/(login)$, allow_if: "not has_role('ROLE_USER')"}
        - { path: ^/admin/pret/add, role: ROLE_COMMERCIAL}
        - { path: ^/admin/pret/mesPrets, role: ROLE_COMMERCIAL}
        - { path: ^/admin/pret/cancelpret, role: ROLE_RESPONSABLE}
        - { path: ^/admin/materiel/add, role: ROLE_RESPONSABLE}
        - { path: ^/admin/users, role: ROLE_ADMIN}
        - { path: ^/admin, role: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
